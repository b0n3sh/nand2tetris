// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=gotA);
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    Or(a=gotA, b=instruction[5], out=enableARegister);
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inRegisterA); // The A register can hold either the instruction value (when using A instructions, for jumps) or the computation from the ALU (when doing C instructions, and we choose to store the data in the A register).
    ARegister(in=inRegisterA, load=enableARegister, out=outRegisterA, out[0..14]=addressM);
    DRegister(in=outALU, load=loadDRegister, out=outRegisterD); 
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=outRegisterAorMemory);
    ALU(x=outRegisterD, y=outRegisterAorMemory, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zeroALU, ng=negALU); // Compute D with A|M
    And(a=instruction[15], b=instruction[3], out=writeM); // enable writeM if we have C instruction and the store bit of RAM. 
    Not(in=negALU, out=greaterThan);
    Not(in=zeroALU, out=noZeroALU);
    And(a=noZeroALU, b=greaterThan, out=positiveALU);
    Or(a=zeroALU, b=negALU, out=lessEqual);

    // jmp lgc
    // Previous implementation was with custom chipset: Mux8Way(a=false, b=greaterThan, c=zeroALU, d=positiveALU, e=negALU, f=noZeroALU, g=lessEqual, h=true, sel=instruction[0..2], out=jumpGuess);
    And(a=instruction[0], b=positiveALU, out=jPositive);
    And(a=instruction[1], b=zeroALU, out=jZero);
    And(a=instruction[2], b=negALU, out=jNegative);
    Or(a=jPositive, b=jZero, out=jPositiveOrjZero);
    Or(a=jPositiveOrjZero, b=jNegative, out=jumpGuess);
    
    And(a=jumpGuess, b=instruction[15], out=jumpOrNot);
    PC(in=outRegisterA, load=jumpOrNot, inc=true, reset=reset, out[0..14]=pc);
}
