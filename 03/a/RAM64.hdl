// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
        DMux8Way(in=load, a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[3..5]); // Which RAM are we using.
        RAM8(in=in, address=address[0..2], load=ram0, out=outram0); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram1, out=outram1); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram2, out=outram2); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram3, out=outram3); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram4, out=outram4); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram5, out=outram5); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram6, out=outram6); // Normal RAM8
        RAM8(in=in, address=address[0..2], load=ram7, out=outram7); // Normal RAM8
        Mux8Way16(a=outram0, b=outram1, c=outram2, d=outram3, e=outram4, f=outram5, g=outram6, h=outram7, sel=address[3..5], out=out); // We choose the output from the array of RAM8s.
}
